// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QubicLiveServiceClient is the client API for QubicLiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QubicLiveServiceClient interface {
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	QuerySmartContract(ctx context.Context, in *QuerySmartContractRequest, opts ...grpc.CallOption) (*QuerySmartContractResponse, error)
	BroadcastTransaction(ctx context.Context, in *BroadcastTransactionRequest, opts ...grpc.CallOption) (*BroadcastTransactionResponse, error)
	GetTickInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTickInfoResponse, error)
	// /block-height Deprecated in favor of /tick-info
	GetBlockHeight(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBlockHeightResponse, error)
	GetIssuedAssets(ctx context.Context, in *IssuedAssetsRequest, opts ...grpc.CallOption) (*IssuedAssetsResponse, error)
	GetOwnedAssets(ctx context.Context, in *OwnedAssetsRequest, opts ...grpc.CallOption) (*OwnedAssetsResponse, error)
	GetPossessedAssets(ctx context.Context, in *PossessedAssetsRequest, opts ...grpc.CallOption) (*PossessedAssetsResponse, error)
	// Returns an issued asset.
	GetIssuedAssetByUniverseIndex(ctx context.Context, in *GetIssuedAssetByUniverseIndexRequest, opts ...grpc.CallOption) (*AssetIssuance, error)
	// Returns a list of issued assets.
	GetIssuedAssetsByFilter(ctx context.Context, in *GetIssuedAssetsByFilterRequest, opts ...grpc.CallOption) (*AssetIssuances, error)
	// Returns a list of asset owners. Asset name and issuer are required. Issuer defaults to zero address.
	GetOwnedAssetsByFilter(ctx context.Context, in *GetOwnedAssetsByFilterRequest, opts ...grpc.CallOption) (*AssetOwnerships, error)
	// Returns a list of asset possessors. Asset name and issuer are required. Issuer defaults to zero address.
	GetPossessedAssetsByFilter(ctx context.Context, in *GetPossessedAssetsByFilterRequest, opts ...grpc.CallOption) (*AssetPossessions, error)
}

type qubicLiveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQubicLiveServiceClient(cc grpc.ClientConnInterface) QubicLiveServiceClient {
	return &qubicLiveServiceClient{cc}
}

func (c *qubicLiveServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/qubic.http.qubic.pb.QubicLiveService/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qubicLiveServiceClient) QuerySmartContract(ctx context.Context, in *QuerySmartContractRequest, opts ...grpc.CallOption) (*QuerySmartContractResponse, error) {
	out := new(QuerySmartContractResponse)
	err := c.cc.Invoke(ctx, "/qubic.http.qubic.pb.QubicLiveService/QuerySmartContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qubicLiveServiceClient) BroadcastTransaction(ctx context.Context, in *BroadcastTransactionRequest, opts ...grpc.CallOption) (*BroadcastTransactionResponse, error) {
	out := new(BroadcastTransactionResponse)
	err := c.cc.Invoke(ctx, "/qubic.http.qubic.pb.QubicLiveService/BroadcastTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qubicLiveServiceClient) GetTickInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTickInfoResponse, error) {
	out := new(GetTickInfoResponse)
	err := c.cc.Invoke(ctx, "/qubic.http.qubic.pb.QubicLiveService/GetTickInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qubicLiveServiceClient) GetBlockHeight(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetBlockHeightResponse, error) {
	out := new(GetBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/qubic.http.qubic.pb.QubicLiveService/GetBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qubicLiveServiceClient) GetIssuedAssets(ctx context.Context, in *IssuedAssetsRequest, opts ...grpc.CallOption) (*IssuedAssetsResponse, error) {
	out := new(IssuedAssetsResponse)
	err := c.cc.Invoke(ctx, "/qubic.http.qubic.pb.QubicLiveService/GetIssuedAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qubicLiveServiceClient) GetOwnedAssets(ctx context.Context, in *OwnedAssetsRequest, opts ...grpc.CallOption) (*OwnedAssetsResponse, error) {
	out := new(OwnedAssetsResponse)
	err := c.cc.Invoke(ctx, "/qubic.http.qubic.pb.QubicLiveService/GetOwnedAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qubicLiveServiceClient) GetPossessedAssets(ctx context.Context, in *PossessedAssetsRequest, opts ...grpc.CallOption) (*PossessedAssetsResponse, error) {
	out := new(PossessedAssetsResponse)
	err := c.cc.Invoke(ctx, "/qubic.http.qubic.pb.QubicLiveService/GetPossessedAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qubicLiveServiceClient) GetIssuedAssetByUniverseIndex(ctx context.Context, in *GetIssuedAssetByUniverseIndexRequest, opts ...grpc.CallOption) (*AssetIssuance, error) {
	out := new(AssetIssuance)
	err := c.cc.Invoke(ctx, "/qubic.http.qubic.pb.QubicLiveService/GetIssuedAssetByUniverseIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qubicLiveServiceClient) GetIssuedAssetsByFilter(ctx context.Context, in *GetIssuedAssetsByFilterRequest, opts ...grpc.CallOption) (*AssetIssuances, error) {
	out := new(AssetIssuances)
	err := c.cc.Invoke(ctx, "/qubic.http.qubic.pb.QubicLiveService/GetIssuedAssetsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qubicLiveServiceClient) GetOwnedAssetsByFilter(ctx context.Context, in *GetOwnedAssetsByFilterRequest, opts ...grpc.CallOption) (*AssetOwnerships, error) {
	out := new(AssetOwnerships)
	err := c.cc.Invoke(ctx, "/qubic.http.qubic.pb.QubicLiveService/GetOwnedAssetsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qubicLiveServiceClient) GetPossessedAssetsByFilter(ctx context.Context, in *GetPossessedAssetsByFilterRequest, opts ...grpc.CallOption) (*AssetPossessions, error) {
	out := new(AssetPossessions)
	err := c.cc.Invoke(ctx, "/qubic.http.qubic.pb.QubicLiveService/GetPossessedAssetsByFilter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QubicLiveServiceServer is the server API for QubicLiveService service.
// All implementations must embed UnimplementedQubicLiveServiceServer
// for forward compatibility
type QubicLiveServiceServer interface {
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	QuerySmartContract(context.Context, *QuerySmartContractRequest) (*QuerySmartContractResponse, error)
	BroadcastTransaction(context.Context, *BroadcastTransactionRequest) (*BroadcastTransactionResponse, error)
	GetTickInfo(context.Context, *emptypb.Empty) (*GetTickInfoResponse, error)
	// /block-height Deprecated in favor of /tick-info
	GetBlockHeight(context.Context, *emptypb.Empty) (*GetBlockHeightResponse, error)
	GetIssuedAssets(context.Context, *IssuedAssetsRequest) (*IssuedAssetsResponse, error)
	GetOwnedAssets(context.Context, *OwnedAssetsRequest) (*OwnedAssetsResponse, error)
	GetPossessedAssets(context.Context, *PossessedAssetsRequest) (*PossessedAssetsResponse, error)
	// Returns an issued asset.
	GetIssuedAssetByUniverseIndex(context.Context, *GetIssuedAssetByUniverseIndexRequest) (*AssetIssuance, error)
	// Returns a list of issued assets.
	GetIssuedAssetsByFilter(context.Context, *GetIssuedAssetsByFilterRequest) (*AssetIssuances, error)
	// Returns a list of asset owners. Asset name and issuer are required. Issuer defaults to zero address.
	GetOwnedAssetsByFilter(context.Context, *GetOwnedAssetsByFilterRequest) (*AssetOwnerships, error)
	// Returns a list of asset possessors. Asset name and issuer are required. Issuer defaults to zero address.
	GetPossessedAssetsByFilter(context.Context, *GetPossessedAssetsByFilterRequest) (*AssetPossessions, error)
	mustEmbedUnimplementedQubicLiveServiceServer()
}

// UnimplementedQubicLiveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQubicLiveServiceServer struct {
}

func (UnimplementedQubicLiveServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedQubicLiveServiceServer) QuerySmartContract(context.Context, *QuerySmartContractRequest) (*QuerySmartContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySmartContract not implemented")
}
func (UnimplementedQubicLiveServiceServer) BroadcastTransaction(context.Context, *BroadcastTransactionRequest) (*BroadcastTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastTransaction not implemented")
}
func (UnimplementedQubicLiveServiceServer) GetTickInfo(context.Context, *emptypb.Empty) (*GetTickInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickInfo not implemented")
}
func (UnimplementedQubicLiveServiceServer) GetBlockHeight(context.Context, *emptypb.Empty) (*GetBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeight not implemented")
}
func (UnimplementedQubicLiveServiceServer) GetIssuedAssets(context.Context, *IssuedAssetsRequest) (*IssuedAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssuedAssets not implemented")
}
func (UnimplementedQubicLiveServiceServer) GetOwnedAssets(context.Context, *OwnedAssetsRequest) (*OwnedAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnedAssets not implemented")
}
func (UnimplementedQubicLiveServiceServer) GetPossessedAssets(context.Context, *PossessedAssetsRequest) (*PossessedAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPossessedAssets not implemented")
}
func (UnimplementedQubicLiveServiceServer) GetIssuedAssetByUniverseIndex(context.Context, *GetIssuedAssetByUniverseIndexRequest) (*AssetIssuance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssuedAssetByUniverseIndex not implemented")
}
func (UnimplementedQubicLiveServiceServer) GetIssuedAssetsByFilter(context.Context, *GetIssuedAssetsByFilterRequest) (*AssetIssuances, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssuedAssetsByFilter not implemented")
}
func (UnimplementedQubicLiveServiceServer) GetOwnedAssetsByFilter(context.Context, *GetOwnedAssetsByFilterRequest) (*AssetOwnerships, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOwnedAssetsByFilter not implemented")
}
func (UnimplementedQubicLiveServiceServer) GetPossessedAssetsByFilter(context.Context, *GetPossessedAssetsByFilterRequest) (*AssetPossessions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPossessedAssetsByFilter not implemented")
}
func (UnimplementedQubicLiveServiceServer) mustEmbedUnimplementedQubicLiveServiceServer() {}

// UnsafeQubicLiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QubicLiveServiceServer will
// result in compilation errors.
type UnsafeQubicLiveServiceServer interface {
	mustEmbedUnimplementedQubicLiveServiceServer()
}

func RegisterQubicLiveServiceServer(s grpc.ServiceRegistrar, srv QubicLiveServiceServer) {
	s.RegisterService(&QubicLiveService_ServiceDesc, srv)
}

func _QubicLiveService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QubicLiveServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qubic.http.qubic.pb.QubicLiveService/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QubicLiveServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QubicLiveService_QuerySmartContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySmartContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QubicLiveServiceServer).QuerySmartContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qubic.http.qubic.pb.QubicLiveService/QuerySmartContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QubicLiveServiceServer).QuerySmartContract(ctx, req.(*QuerySmartContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QubicLiveService_BroadcastTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QubicLiveServiceServer).BroadcastTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qubic.http.qubic.pb.QubicLiveService/BroadcastTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QubicLiveServiceServer).BroadcastTransaction(ctx, req.(*BroadcastTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QubicLiveService_GetTickInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QubicLiveServiceServer).GetTickInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qubic.http.qubic.pb.QubicLiveService/GetTickInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QubicLiveServiceServer).GetTickInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QubicLiveService_GetBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QubicLiveServiceServer).GetBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qubic.http.qubic.pb.QubicLiveService/GetBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QubicLiveServiceServer).GetBlockHeight(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _QubicLiveService_GetIssuedAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssuedAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QubicLiveServiceServer).GetIssuedAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qubic.http.qubic.pb.QubicLiveService/GetIssuedAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QubicLiveServiceServer).GetIssuedAssets(ctx, req.(*IssuedAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QubicLiveService_GetOwnedAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OwnedAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QubicLiveServiceServer).GetOwnedAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qubic.http.qubic.pb.QubicLiveService/GetOwnedAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QubicLiveServiceServer).GetOwnedAssets(ctx, req.(*OwnedAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QubicLiveService_GetPossessedAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PossessedAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QubicLiveServiceServer).GetPossessedAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qubic.http.qubic.pb.QubicLiveService/GetPossessedAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QubicLiveServiceServer).GetPossessedAssets(ctx, req.(*PossessedAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QubicLiveService_GetIssuedAssetByUniverseIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssuedAssetByUniverseIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QubicLiveServiceServer).GetIssuedAssetByUniverseIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qubic.http.qubic.pb.QubicLiveService/GetIssuedAssetByUniverseIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QubicLiveServiceServer).GetIssuedAssetByUniverseIndex(ctx, req.(*GetIssuedAssetByUniverseIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QubicLiveService_GetIssuedAssetsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssuedAssetsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QubicLiveServiceServer).GetIssuedAssetsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qubic.http.qubic.pb.QubicLiveService/GetIssuedAssetsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QubicLiveServiceServer).GetIssuedAssetsByFilter(ctx, req.(*GetIssuedAssetsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QubicLiveService_GetOwnedAssetsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOwnedAssetsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QubicLiveServiceServer).GetOwnedAssetsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qubic.http.qubic.pb.QubicLiveService/GetOwnedAssetsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QubicLiveServiceServer).GetOwnedAssetsByFilter(ctx, req.(*GetOwnedAssetsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QubicLiveService_GetPossessedAssetsByFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPossessedAssetsByFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QubicLiveServiceServer).GetPossessedAssetsByFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qubic.http.qubic.pb.QubicLiveService/GetPossessedAssetsByFilter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QubicLiveServiceServer).GetPossessedAssetsByFilter(ctx, req.(*GetPossessedAssetsByFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QubicLiveService_ServiceDesc is the grpc.ServiceDesc for QubicLiveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QubicLiveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qubic.http.qubic.pb.QubicLiveService",
	HandlerType: (*QubicLiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _QubicLiveService_GetBalance_Handler,
		},
		{
			MethodName: "QuerySmartContract",
			Handler:    _QubicLiveService_QuerySmartContract_Handler,
		},
		{
			MethodName: "BroadcastTransaction",
			Handler:    _QubicLiveService_BroadcastTransaction_Handler,
		},
		{
			MethodName: "GetTickInfo",
			Handler:    _QubicLiveService_GetTickInfo_Handler,
		},
		{
			MethodName: "GetBlockHeight",
			Handler:    _QubicLiveService_GetBlockHeight_Handler,
		},
		{
			MethodName: "GetIssuedAssets",
			Handler:    _QubicLiveService_GetIssuedAssets_Handler,
		},
		{
			MethodName: "GetOwnedAssets",
			Handler:    _QubicLiveService_GetOwnedAssets_Handler,
		},
		{
			MethodName: "GetPossessedAssets",
			Handler:    _QubicLiveService_GetPossessedAssets_Handler,
		},
		{
			MethodName: "GetIssuedAssetByUniverseIndex",
			Handler:    _QubicLiveService_GetIssuedAssetByUniverseIndex_Handler,
		},
		{
			MethodName: "GetIssuedAssetsByFilter",
			Handler:    _QubicLiveService_GetIssuedAssetsByFilter_Handler,
		},
		{
			MethodName: "GetOwnedAssetsByFilter",
			Handler:    _QubicLiveService_GetOwnedAssetsByFilter_Handler,
		},
		{
			MethodName: "GetPossessedAssetsByFilter",
			Handler:    _QubicLiveService_GetPossessedAssetsByFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "qubic.proto",
}
